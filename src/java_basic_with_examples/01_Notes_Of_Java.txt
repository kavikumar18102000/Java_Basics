
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Java is not purely an object oriented language.

Java is both compile and interpreted language.

The source code is compiled to a byte-code(class file) and the it is interpreted.


What is JVM?
-> JVM stands for Java Virtual Machine. It is an abstract machine that provides the runtime environment in which Java bytecode can be executed. The JVM is responsible for several key tasks including loading and verifying code, managing memory and providing a secure environment for executing the code. When a Java program is compiled, the resulting bytecode is platform-independent and can run on any system with a JVM implementation installed. This makes Java a "write once, run anywhere" language.

What is JRE?
-> JRE stands for "Java Runtime Environment". It is software developed by Oracle Corporation which provides the minimum requirements to run a Java application or program. 

The JRE includes the Java Virtual Machine (JVM), class libraries, and other necessary files. The JVM is responsible for executing Java code in a machine-independent way, allowing Java programs to be run on any device that has a JRE installed.

When you install the JRE on your system, you can run any Java application or program that requires the runtime environment. Without the JRE, Java programs would not be able to run on your system.

It's important to note that the JRE is different from the JDK (Java Development Kit), which is a software development kit used by developers to create Java applications. The JRE only includes what's needed to run Java applications, while the JDK includes additional tools and components for developing and testing Java programs.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

											Introduction to Object Oriented Programming
											
																				
				
Object oriented programming tries to map code instructions with the real world making the code short and easier to understand.	
	

What is Object Oriented Programming ?
		solving a problem by creating the objects is one of the most popular approaches in programming. This is known as object oriented programming.
	
DRY ---> Do not repeat yourself --> focuses on code re-usability.

class --> it is a blue-print for creating the objects.

object --> it is an instantiation of a class. When a class is defined, a template(info) is defined. Memory is allocated only after object instantiation.


What is known as full object oriented programming?
--> Pure Object Oriented Language or Complete Object Oriented Language are Fully Object Oriented Language which supports or have features which treats everything inside program as objects. It doesn’t support primitive datatype(like int, char, float, bool, etc.). There are seven qualities to be satisfied for a programming language to be pure Object Oriented. They are:

	* Encapsulation/Data Hiding
	* Inheritance
	* Polymorphism
	* Abstraction
	* All predefined types are objects
	* All user defined types are objects
	* All operations performed on objects must be only through methods exposed at the objects.

Why java is not completely an object oriented program?
-> 
	* Primitive Data Type :  ex.int, long, bool, float, char, etc as Objects: Smalltalk is a “pure” object-oriented 	  programming language unlike Java and C++ as there is no difference between values which are objects and values which are primitive types. In Smalltalk, primitive values such as integers, booleans and characters are also objects. In Java, we have predefined types as non-objects (primitive types).

	* The static keyword:  When we declares a class as static then it can be used without the use of an object in Java. If we are using static function or static variable then we can’t call that function or variable by using dot(.) or class object defying object oriented feature.

	* Wrapper Class: Wrapper class provides the mechanism to convert primitive into object and object into primitive. In Java, you can use Integer, Float etc. instead of int, float etc. We can communicate with objects without calling their methods. ex. using arithmetic operators.

	* Even using Wrapper classes does not make Java a pure OOP language, as internally it will use the operations like Unboxing and Autoboxing. So if you create Integer instead of int and do any mathematical operation on it, under the hoods Java is going to use primitive type int only. 


Difference between user-defined and pre-defined?
->
	In programming, user-defined and predefined are two important terms that refer to the way functions or variables are created or defined.

	User-defined refers to the functions or variables that a programmer defines themselves according to the requirements of a particular program. User-defined functions are created by the programmer in order to perform a specific task or calculation within the code. Similarly, user-defined variables are also created by the programmer to store data or values which will be used later in the program.

	On the other hand, predefined functions or variables are those that already exist as part of a programming language. These functions or variables have been built into the language by its creators to provide common functionality that programmers need. For example, Java has many predefined functions such as System.out.println(), Math.sin(), and String.length() which perform specific tasks and can be called in any program that uses the Java language. 

	Predefined variables may include constants like pi, or special keywords like "null" and "true" that are reserved for specific purposes in the language.

	So in summary, user-defined refers to functions or variables that are defined by the programmer, while predefined refers to functions or variables that have been pre-built into the programming language itself.



Basic terminologies in OOP's :

	* Abstraction : hiding the internal details [showing only essential info !]

	* Encapsulation : the act of putting various components together (into a capsule).
					  In java, encapsulation means that the sensitive data can be hidden from the user.

	* Inheritance : the act of inheriting the property of base class to the derived class.

	* Polymorphism : one entity many forms.
	
	
Access modifiers : specify weather a property or a method is accessible.
	
		Types of modifiers are :
			* Private : cannot be accessed outside the defined class..
			* Public  : can be accessed inside and outside the class..
			* Protected :
			* Default : 


Constructors in Java :
		* A member functions used to initialize an object while creating it.....
		* In order to write our very own constructor, we define a method with same name as the class name...


Constructor Overloading in Java :
			Constructor can be overloaded just like method overloading...
		
		NOTE :
			* Constructors can take parameters without overloading.....
			* There can be more than two overloaded constructors....

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

What is Abstract (class) mean ?
		Abstract in English means-> existing in thoughts or having an idea without concrete existence.

Abstract method : A method declared without an implementation...
					example : abstract void move_to(double x, double y) ---> method without implementation....

Abstract class : If a class includes abstract methods, then the class must be declared itself as abstract...

						example : public abstract class Phone_model{
										abstract void switch_off();
										//more code....
								  }

NOTE : * It is possible to create reference of an abstract class...
	   * It not to possible to create an object of an abstract class....

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Interfaces : in English interface means where two systems meet and interact...

In java interface is a group of related methods with empty bodies....

Remember interface cannot implement another interface, only classes can do that...
Implementing an interface forces method implementation...

NOTE : Interface can be public or abstract only. It cannot be a private...

Is Multiple inheritance allowed in java ?

		* Multiple inheritance faces problems when there exist with same method signature in both the super classes.
		* Due to such problems java does not support multiple inheritance directly, but similar concept can be achieved using interfaces.
		* A class can implement multiple interfaces and extend the class at the same time.

	NOTE : 
	       * Interfaces in java is a bit like the class but with a significant difference.
	       * An interface can have only methods signatures, fields and default methods.
	       * The class implementing the interface needs on to declare the methods not fields(constants).
	       * You can create reference of interfaces but not object.
	       * Interface methods are public by default.. 

Default Methods : 
				* An interface can have both static and default methods.
				* Default methods enable us to add new functionality to the existing interface.
				* This feature was introduced in Java 8 to ensure backward compatibility while updating an interface.
				* classes implementing the interfaces need not implement the default methods.
				* Interfaces can also include private methods for default methods to use.

Inheritance in Interfaces : An Interface can extend another interface. But interface can't implement another interface.

					example :
					 			public interface Interface1{
					 				void meth1();
					 			}
					 			
					 			public interface Interface2 extends Interface1{
					 				void meth2();
					 			}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Interpreter VS Compiler

Interpreter : * translates one statement at time into a machine code.
			  * Interpreter is need every time.
			  * Partial execution if error.
			  * Easy for programmers
			  
Compiler : * translates entire program into a machine code at a time.
		   * Once compiled it is not needed.
		   * No execution if encounters an error.
		   * Usually not east as interpreter one.
		   
NOTE : Compiled languages are faster than the interpreted languages.


Is Java interpreter or compiled language ?
		
		Java is both interpreted as well as compiled language.

* A JVM (Java Virtual Machine) is used to interpret this byte code.
* This byte code can be taken to any platform (like windows, mac, linux..) for execution
* Hence java is platform independent (write once, run everywhere).


		Executing a Java program :
		
				javac file1.java --> Compiled
				java file1.class ---> Interpreted
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Packages in Java : 
				A package is used to group related classes. Packages helps in avoiding name conflicts.
				
				There are two types of Packages in Java :
					* Built in packages ---> Java API
					* User defined packages ---> custom packages
					
		Different ways of Using a Java package :
		
			* import java.lang.*; ---> import everything from java.lang.
			* import java.lang.String; ---> import only String from java.lang.
			* s = new java.lang.String("Arya") --> use without importing.

  Creating Packages :
  			javac -d . basic.java --> creates package folder (we can keep adding classes to a package like this).
  			
  			TO add all the classes at a time : javac -d . *.java (adds all the class file to the package)
  			To make sub package in a package : "package basic.inner;" 
  			
 To use packages use "import package_name;" in the program....

After creating package how to run the program ?
			
			command : java package_name/class_name;

NOTE : Make sure that java file is present inside the package.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Access Modifiers : 
			Access modifiers determines whether other classes can use a particular field or invoke a particular method can be private, public, protected or default(no modifier);
			
			-----------------------------------------------------------------------------------------
			MODIFIER 			CLASS 				PACKAGE  			SUBCLASS			WORLD
			-----------------------------------------------------------------------------------------
			Private              YES					NO					NO					NO
			-----------------------------------------------------------------------------------------
			Public 				 YES					YES					YES					YES
			-----------------------------------------------------------------------------------------
			Protected			 YES					YES					YES					No
			-----------------------------------------------------------------------------------------
			Default(no)			 YES 					YES					NO					NO			
			-----------------------------------------------------------------------------------------
			
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Multi-Threading :
		
		Multi-threading or multiprocessing are used to achieve multi-tasking.
		
	In a nut shell :
		* Threads use shared memory
		* Threads --> faster content switching
		* A thread is light-weight whereas process is heavy-weight.
		
		For example : A word processor can have one thread running in the foreground as an editor and another in the background auto-saving the document !.
					
	Creating Threads in java :
				In java there are two ways to create thread.
				* By extending thread class.
				* By implement runnable interface
				
 	Life cycle of a Thread : 
 	
 		step 1 ->  New : instance of thread created which is not yet started by invoking start().
 		
 		step 2 -> Runnable : after invocation of start() and before it is selected to be run by the scheduler.
 		
 		step 3 -> Running : after thread scheduler has selected it.
 		
 		step 4 -> Non-Runnable(blocked):thread is alive but not eligible to run.
 		
 		step 5 -> Terminal : run() method has exited.
 				

 Some commonly used Thread class constructors are :  
     
       		* Thread()
       		* Thread(String name) --> allocates a new thread object.
       		* Thread(Runnable r)
       		* Thread(Runnable r, String name)
       		
NOTE : which thread gets executed highly depends on the OS.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

  											Errors and Exceptions 
  
  There are 3 types of errors :
  
  1) Syntax error : when compiler finds something wrong with our program, then it throws an syntax error.
  			
  			example : int a = 10   ---> semicolon is missing, so it throws an syntax error.
  
  
  2) Logical error : A logical error or a bug error occurs when a program compiles and runs but does the wrong thing.
  						
  						* message delivered wrongly
  						* wrong time of chats displayed
  						* incorrect redirects !
  
  
  3) Run-time errors (Exceptions) : Java sometimes may encounter an error while the program is running. These are also called Exceptions !. These are 	encountered due to circumstances like bad input or resource constraints.
  									
  									example : user supplies 's'+8 which adds two numbers, but user should provide an integer number. So it is an exception.
  									
  			
  						
  						
  
  Exceptions in Java :
  				
  				An exception is an event that occurs when a program is executed disrupting the normal flow of instructions.
  				
  				There are mainly 2 types of exceptions are : 
  				
  					 * checked exception --> compile time exception (handled by the compiler).
  					 * unchecked exception --> runtime exception.
  						
  				Commonly occurring exceptions are :
  				
  				* Null Pointer exception
  				* Arithmetic exception
  				* Array_Index_Out_Of_Bound exception
  				* Illegal Argument exception
  				* Number Format exception
  				
  				
  try-catch block in Java :
  				
  				syntax : 
  						 try{
  						 
  						 	//code to try....
  						 	
  						 	}
  						 catch(Exception e){
  						 
  						 	//code if exception....
  						 	
  						 }
  						
  						
  						
  	Handling specific exceptions : 
  		In java, we can handle specific exceptions by typing multiple catch blocks.
  		
  		try{
  			//code to try
  		}
  		catch(IO Exception e){
  			//code if  an error     ---> handles the input and output error
  		}
  		catch(Arithmetic Exception e){
  			//code if an error 		-----> handles all the arithmetic error
  		}
  		catch(Exception e){
  			// code if some other error
  		}
  						
  						
  	Nested try catch in Java :
  			
  			try{
  				
  				try{
  					//code to try
  				}
  				catch(Exception e){
  					//code if an error
  				}
  				
  			}
  			
  			catch(Exception e){
  				// code if an exception
  			}
  						
  	Further we can implement nested try-catch inside the try-catch.
  						
  					
  Exception class in Java :
  			In java we can create our own custom Exceptions using 'Exception' class in java.
  			
  			example : 
  						public class myexcep extends Exception{
  						
  							// overridden methods
  						
  						}
  						
  			The exception has the following important methods :
  			
  				* String toString() ------> executed when sout(e) is ran.
  				* String getMessage() -----> prints the exception message.
  				* void printStackTrave() ---> prints the stack trace.
  				
  				
  		The 'throw' keyword :
  				The 'throw' keyword is used to throw the an exception explicitly by the programmer.
  				
  				example :  if(b==0){
  								throw new ArithmeticException("Divide by 0");
  							}
  							else{
  								//code
  							}
  							
  				In similar manner we can throw user defined exception :
  				
  						example : if(b==0){
  										throw new Myexcep("sorry");
  									}
  									
  								  else{
  								  	//code
  								  	}
  						
  		The 'throws' keyword : 
  				
  				This gives an information to the programmer that there might be an exception, so that it is better to be prepared with a try-catch block.
  				
  				example : public static void print(int a, int )throws IOException{
  								// code
  						  }
  	'finally' block in Java :
  				
  				finally block contains the code which is always executed whether the exception is handled or not.
  				It is used to code containing instructions to release the system resources or connection etc....				
  						
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

										----------------------- Advanced Java -----------------


Collection Framework : * A collection represents a group of objects.
					   * Java collections provide classes and interfaces for us to be able to write code quickly and efficiently.
					   
					   
Why do we need collection framework ?
		we need collections for efficient storage and better manipulation of data in java.
		
		
How collections are available ?
		collections in java are available as classes and objects.
		
		Following are some commonly used collections in java :
			* ArrayList ---> for variable size collection.
			* Set ---> for distinct collection.
			* Stack ---> A LIFO data structure.
			* HashMap ---> for storing key value pairs.
			
		collection classes are available in java.util package.
		collection class also provides static methods for sorting and searching etc...		   

  						
---------------------------------------------------------------------------------------------------------------------------------------------------------------------						
  						
  Hashing Technique :
  		
  		The method of converting the key-value pairs into indices.
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Date and Time : 

	 * Date and time in java are stored in long number.
	 * Java assumes 1900 is the start year and it calculates the year passed since 1900 whenever we ask for the year passed.
	 * System.currentTimeMillis() returns the no of milli-seconds passed. It can be converted it into seconds, minutes, day and years passed.
	 		 		
  	
  	Data class in Java :
  			
  			Date d = new Date();
  			System.out.println(d);
  			we can also use constructor provided by the date class.
  						
  						
 			
			
			
